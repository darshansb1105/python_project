pipeline {
           agent {
               label 'docker'
                 }
    parameters {
        string(name: 'IMAGE_NAME_TAG', defaultValue: 'python-app', description: 'Docker image name and tag')
    }
    environment {
        imageTag = ''
        timestamp = ''
    }
    stages {
       stage('Checkout') {

            steps {
                deleteDir()
                sh '''
                   git init
                   git clone https://github.com/darshansb1105/python_project.git
                   cd python_project
                   chmod -R 777 .
                   ls -lrt
                   '''
                stash name: 'test'
        }
       }

        stage('Build Docker Image') {
              steps {
                script {
                    timestamp = sh(script: 'date -u +%Y%m%d%H%M%S', returnStdout: true).trim()
                    def imageNameTag = params.IMAGE_NAME_TAG
                    imageTag = "${imageNameTag}:${timestamp}"
                    // Build the Docker image using PythonDockerBuild file
                   
                    unstash 'test'
                    docker build -t "${imageTag}" -f ./PythonDockerBuild .

                }
            }
        }

        stage('Scan for Vulnerabilities') {
            script {
                sh "docker scout $imageTag"  // Use double quotes to interpolate variables
            }
        }

        stage('Push to Docker Hub') {
            steps {
                // Push the Docker image to Docker Hub
                withCredentials([string(credentialsId: 'docker-hub-token', variable: 'DOCKER_TOKEN')]) {
                    script {
                        def dockerToken = env.DOCKER_TOKEN

                        // Log in to Docker Hub using the token
                        sh "echo $dockerToken | docker login --username darshill143 --password-stdin"

                        // Tag and push the Docker image
                        sh "docker tag $imageTag darshill143/test_repo:${timestamp}"
                        sh "docker push darshill143/test_repo:${timestamp}"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                // Deploy the image to a Kubernetes cluster using kubectl
                sh 'kubectl apply -f https://github.com/darshansb1105/python_project/main/deployment.yaml'
                sh 'kubectl apply -f https://github.com/darshansb1105/python_project/main/service.yaml'
            }
        }
    }
    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
